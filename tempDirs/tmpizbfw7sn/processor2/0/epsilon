/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2312                                  |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    arch        "LSB;label=32;scalar=64";
    class       volScalarField;
    location    "0";
    object      epsilon;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 2 -3 0 0 0 0];

internalField   uniform 0.01;

boundaryField
{
    inletWater
    {
        type            fixedValue;
        value           nonuniform List<scalar> 0();
    }
    outletWater
    {
        type            zeroGradient;
    }
    freeSurface
    {
        type            codedFixedValue;
        value           uniform 0.3;
        name            myEpsilonFS;
        codeInclude     #{
				#include "fvCFD.H"
				#include <cmath>
				#include <iostream>
			#};
        code            #{
			const fvPatch& boundaryPatch = this->patch();
			const volScalarField& eps = this->db().lookupObject<volScalarField>("epsilon");
			const fvMesh& mesh = eps.mesh();
			const vectorField& Cf = boundaryPatch.Cf();// face center coordinates for the patch
			const dimensionedScalar h = max(mesh.Cf().component(2));//flow depth in m
			fvPatchScalarField& epsilon = *this;

Info<<"depth: "<<h.value() << endl;

			const fvPatchScalarField& kinenp = boundaryPatch.lookupPatchField<volScalarField, scalar>("k");
			
			forAll(Cf, facei)
			{
				scalar kinenf = kinenp[facei];// turbulent kinetic energy at the facei
				epsilon[facei] = 2.3*pow(kinenf, 1.5) / h.value();
			}
		#};
        codeOptions     #{
				-I$(LIB_SRC)/finiteVolume/lnInclude\
				-I$(LIB_SRC)/meshTools/lnInclude\
			#};
        codeLibs        #{ -lfiniteVolume -lmeshTools 
			#};
    }
    leftSide
    {
        type            epsilonWallFunction;
        value           uniform 0.01;
    }
    rightSide
    {
        type            epsilonWallFunction;
        value           uniform 0.01;
    }
    bedWall
    {
        type            epsilonWallFunction;
        value           uniform 0.01;
    }
    procBoundary2to1
    {
        type            processor;
        value           uniform 0.01;
    }
    procBoundary2to3
    {
        type            processor;
        value           uniform 0.01;
    }
}


// ************************************************************************* //
